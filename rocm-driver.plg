<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name      "rocm-driver">
  <!ENTITY author    "yourname">
  <!ENTITY version   "2024.03.09">
  <!ENTITY launch    "Settings/rocm-driver">
  <!ENTITY gitURL    "https://github.com/&author;/unraid-&name;/raw/master">
  <!ENTITY pluginURL "&gitURL;/&name;.plg">
  <!ENTITY md5       "">
  <!ENTITY plugin    "/boot/config/plugins/&name;">
  <!ENTITY emhttp    "/usr/local/emhttp/plugins/&name;">
  <!ENTITY packages  "/boot/config/plugins/&name;/packages">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.9.0-beta31" support="https://forums.unraid.net/topic/your-support-thread">

<CHANGES>

###2024.03.09
- Initial Release
- Basic ROCm driver installation support
- Support for container runtime
- Auto-update functionality

</CHANGES>

<FILE Run="/bin/bash">
<INLINE>
rm -f $(ls /boot/config/plugins/&name;/&name;*.txz 2>/dev/null|grep -v '&version;')
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/&name;/&name;-&version;.txz" Run="upgradepkg --install-new">
<URL>&gitURL;/packages/&name;-&version;.txz</URL>
<MD5>&md5;</MD5>
</FILE>

<FILE Name="&emhttp;/README.md">
<INLINE>
**ROCm Driver**

This plugin installs the ROCm drivers to utilize your AMD graphics card (supported by ROCm) in Docker containers.
This plugin enables GPU acceleration for AMD GPUs and provides integration with Docker containers.
</INLINE>
</FILE>

<FILE Run="/bin/bash">
<INLINE>

download() {
if wget -q -nc --show-progress --progress=bar:force:noscroll -O "&packages;/${KERNEL_V%%-*}/${LAT_PACKAGE}" "${DL_URL}/${LAT_PACKAGE}" ; then
  wget -q -nc --show-progress --progress=bar:force:noscroll -O "&packages;/${KERNEL_V%%-*}/${LAT_PACKAGE}.md5" "${DL_URL}/${LAT_PACKAGE}.md5"
  if [ "$(md5sum &packages;/${KERNEL_V%%-*}/${LAT_PACKAGE} | awk '{print $1}')" != "$(cat &packages;/${KERNEL_V%%-*}/${LAT_PACKAGE}.md5 | awk '{print $1}')" ]; then
    echo
    echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
    echo "--------------------------------CHECKSUM ERROR!---------------------------------"
    rm -rf &plugin; &emhttp;
    exit 1
  fi
  echo
  sed -i '/driver_version=/c\driver_version=latest' "&plugin;/settings.cfg"
  echo "----Successfully downloaded ROCm Driver Package v$(echo $LAT_PACKAGE | cut -d '-' -f2), please wait!----"
else
  echo
  echo "--------------Can't download ROCm Driver Package v$(echo $LAT_PACKAGE | cut -d '-' -f2)-----------------"
  rm -rf &plugin; &emhttp;
  exit 1
fi
}

get_version() {
LAT_PACKAGE="$(wget -qO- https://api.github.com/repos/${AUTHOR}/unraid-rocm-driver/releases/tags/${KERNEL_V} | jq -r '.assets[].name' | grep "${PACKAGE}" | grep -E -v '\.md5$' | sort -V | tail -1)"
if [ -z "$LAT_PACKAGE" ]; then
  if [ -z "$CUR_V" ]; then
    echo
    echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
    echo "---Can't get latest ROCm driver version and found no installed local driver---"
    rm -rf &plugin; &emhttp;
    exit 1
  else
    LAT_PACKAGE=${CUR_V}
  fi
fi
}

check() {
if ! ls -1 &packages;/${KERNEL_V%%-*}/ | grep -q "${PACKAGE}" ; then
  get_version
  echo
  echo "+=============================================================================="
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "|"
  echo "| Don't close this window until the 'DONE' button is displayed!"
  echo "|"
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "+=============================================================================="
  echo
  echo "-----------------Downloading ROCm Driver Package v$(echo $LAT_PACKAGE | cut -d '-' -f2)------------------"
  echo "----------This could take some time, please don't close this window!------------"
  download
else
  LAT_PACKAGE=$CUR_V
  echo
  echo "--------------------ROCm driver v$(echo $LAT_PACKAGE | cut -d '-' -f2) found locally---------------------"
fi
}

install() {
/sbin/installpkg "&packages;/${KERNEL_V%%-*}/${PACKAGE}*.txz"
depmod >> /dev/null
modprobe amdgpu >> /dev/null
}

if [ ! -f "&plugin;/settings.cfg" ]; then
  echo 'first_installation=true
driver_version=latest
update_check=true' > "&plugin;/settings.cfg"
fi

KERNEL_V="$(uname -r)"
SET_DRV_V="$(grep "driver_version" "&plugin;/settings.cfg" | cut -d '=' -f2)"
export PACKAGE="rocm"
DL_URL="https://github.com/${AUTHOR}/unraid-rocm-driver/releases/download/${KERNEL_V}"
UPDATE_CHECK="$(grep "update_check" &plugin;/settings.cfg | head -1 | cut -d '=' -f2)"

if [ ! -d "&packages;/${KERNEL_V%%-*}" ]; then
  mkdir -p "&packages;/${KERNEL_V%%-*}"
  CUR_V=""
else
  CUR_V="$(ls -p &packages;/${KERNEL_V%%-*} 2>/dev/null | grep -E -v '\.md5' | sort -V | tail -1)"
fi

check

if ! modinfo amdgpu -0 >/dev/null 2>&1 ; then
  echo
  echo "-----------------Installing ROCm Driver Package v$(echo $LAT_PACKAGE | cut -d '-' -f2)-------------------"
  install > /dev/null
fi

if [ "$UPDATE_CHECK" == "true" ]; then
  if [ ! "$(crontab -l | grep "/usr/local/emhttp/plugins/rocm-driver/include/update-check.sh")" ]; then
    (crontab -l ; echo ""$((0 + $RANDOM % 59))" "$(shuf -i 8-9 -n 1)" * * * /usr/local/emhttp/plugins/rocm-driver/include/update-check.sh &>/dev/null 2>&1") | crontab -
  fi
fi

if [ "$(grep "first_installation=" "&plugin;/settings.cfg" | cut -d '=' -f2)" == "true" ]; then
  /usr/local/emhttp/plugins/dynamix/scripts/notify -e "ROCm Driver" -d "Please disable and re-enable Docker if this is the first ROCm driver installation! Settings -> Docker -> Enable Docker 'No' -> Apply -> Then Enable Docker 'Yes' -> Apply" -i "alert" -l "/Settings/DockerSettings"
  sed -i '/first_installation=true/c\first_installation=false' "&plugin;/settings.cfg"
  echo
  echo "------------Installation of ROCm driver v$(echo $LAT_PACKAGE | cut -d '-' -f2) successful----------------"
  echo
  echo "Please disable and re-enable Docker for the first time usage!"
else
  sed -i '/first_installation=true/c\first_installation=false' "&plugin;/settings.cfg"
  echo
  echo "--------------Installation of ROCm driver v$(echo $LAT_PACKAGE | cut -d '-' -f2) successful--------------"
fi